function [x, ierr] = mynewton(f, fp, x0, tol, kmax)
% purpose: finding the zero of a function using the method of
% Newton (or of tangents)
%
% syntax: [x, ierr] = mynewton(f, fp, x0, tol, kmax)
% input:
% f:       name of the function whose zero is to be searched for
% fp:      name of the first derivative of f function
% x0:      according to the local convergence theorem, there exists a neighborhood of the zero
%          of the function where, choosing any initial point, the
%          sequence generated by the Newton method converges to the zero of the
%          function. x0 is the starting point of the iteration formula
% tol:     preset tolerance (maximum error the algorithm can make
%          on the zero)
% kmax:    maximum number of iterations (security factor used to avoid
%          the risk of infinite cycles)
% output:
% x:       approximate zero of the function
% ierr:    error indicator, returns -1 if the algorithm finds a
%          result that does not satisfy the desired tolerance, 0 if instead
%          it does satisfy it
%
% stopping criterion: the algorithm uses as a stopping criterion an
% estimate of the error calculated on successive iterations
%
% example:
% f = @(x) cos(2*x)^2 - x^2;
% fp = @(x) -2*cos(2*x)*sin(2*x) - 2*x;
% x0 = 10;
% tol = 10^-10;
% kmax = 100;
%
% [x, ierr] = mynewton(f, fp, x0, tol, kmax)
%
% Author: Luigi Emanuele Zippo

ierr = -1;
k = 0;

while (k < kmax) && (ierr == -1)

    x = x0 - f(x0) / fp(x0);

    % x0 - f(x0)/fp(x0) is, graphically, the intersection between the
    % x-axis and the tangent to f at the point (x0, f(x0)); I assign this value
    % to x1 so that I perform a single function evaluation;

    if abs(x - x0) < tol

        ierr = 0;
        break

    else

        % if the obtained value does not satisfy the tolerance, I assign it to x0;
        % this way, I calculate at the next iteration the intersection between the
        % tangent at the point (x1, f(x1)) and the x-axis

        x0 = x;

    end

    k = k + 1;

end

end
